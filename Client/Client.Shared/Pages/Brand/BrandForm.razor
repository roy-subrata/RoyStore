@using Client.Shared.Services
@inject BrandService BrandService
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> L
<MudPaper Class="pa-4">
    <MudForm @ref="form" Model="Model" @bind-IsValid="@success">
        <MudTextField T="string" Label="Name" @bind-Value="Model.Name" Required="true"
            RequiredError="Name is required!" />
        <MudTextField T="string" Label="Description" @bind-Value="Model.Description" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="mt-2 ml-auto"
            OnClick="Submit">
            @L["Save"]
        </MudButton>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public BrandModel Model { get; set; } = new BrandModel();

    [Parameter]
    public EventCallback<BrandModel> OnSubmitCompleted { get; set; }

    private bool IsEditMode => String.IsNullOrEmpty(Model?.Id) == false;
    private bool success;
    private MudForm? form;
    private BrandModel brandModel = new BrandModel();

    protected override void OnParametersSet()
    {
        if (IsEditMode && Model != null)
        {
            Model = new BrandModel
            {
                Id = Model.Id,
                Name = Model.Name,
                Description = Model.Description
            };
        }
        else
        {
            Model = new BrandModel();
        }
    }

    private async Task Submit()
    {
        if (form is null)
            return;
        if (form.IsValid)
        {
            try
            {
                if (IsEditMode)
                {
                    await BrandService.UpdateAsync(Model.Id, new UpdateBrandDto(Model.Name,
                    Model.Description));
                    await OnSubmitCompleted.InvokeAsync(Model);
                }
                else
                {
                    var respone = await BrandService.CreateAsync(new CreateBrandDto(Model.Name, Model.Description));
                    Model.Id = respone.Id;
                    await OnSubmitCompleted.InvokeAsync(Model);
                }
                Navigation.NavigateTo("/brands");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    public class BrandModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
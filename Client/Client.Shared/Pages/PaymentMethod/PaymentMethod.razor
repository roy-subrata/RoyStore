@page "/Payment-methods"
@using Client.Shared.Pages.Shared
@using Client.Shared.Services
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject PaymentMethodService PaymentVmMethodService
@inject ISnackbar Snackbar

@using static Client.Shared.Pages.PaymentMethod.PaymentMethodForm

<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <!-- Search -->
    <MudTextField @bind-Value="_searchText" Placeholder="Search features..." Variant="Variant.Outlined"
        Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
        DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

    <!-- Actions -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Print"
            OnClick="Print">
            Print
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="OpenAddDialog">
            Add New
        </MudButton>
    </MudStack>
</MudStack>



<MudTable @ref="_table" T="PaymentVm" ServerData="LoadServerData" @bind-SelectedItem="_selectedBrand" Dense="true"
    Elevation="0" Bordered=true class="mt-3" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="PaymentVm" SortBy="x => x.Name">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="PaymentVm" SortBy="x => x.Active">Active</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Active">@context.Active</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" OnClick="@(async () => await EditDialogAsync(context))"
                Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                OnClick="@(async () => await ConfirmAsync(context))" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private string _searchText = "";
    private PaymentVm? _selectedBrand;

    // Main server-side data loader
    private async Task<TableData<PaymentVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1; // MudTable is 0-based
        var pageSize = state.PageSize;

        var result = await PaymentVmMethodService.GetAsync(_searchText, page, pageSize);

        var items = result.Data.Select(c => new PaymentVm
        {
            Id = c.Id,
            Name = c.Name,
            IsActive = c.IsActive
        }).ToList();

        return new TableData<PaymentVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }

    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private MudTable<PaymentVm>? _table;

    private void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    private async Task ConfirmAsync(PaymentVm feature)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this feature?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            await PaymentVmMethodService.DeleteAsync(feature.Id);
            Snackbar.Add("Feature deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task HandleBrandSavedAsync(PaymentMethodModel result)
    {
        Snackbar.Add("Feature saved successfully!", Severity.Success);
        await _table!.ReloadServerData();
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters
{
{ "Model", new PaymentMethodModel() },
{ "OnSubmitCompleted", EventCallback.Factory.Create<PaymentMethodModel>(this, HandleBrandSavedAsync) }
};

        var dialog = await DialogService.ShowAsync<PaymentMethodForm>("Add Feature", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            Snackbar.Add("Feature saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task EditDialogAsync(PaymentVm feature)
    {
        var model = new PaymentMethodModel
        {
            Id = feature.Id,
            Name = feature.Name,
            IsActive = feature.IsActive
        };

        var dialog = await DialogService.ShowAsync<PaymentMethodForm>("Edit Feature",
        new DialogParameters
        {
{ "Model", model },
{ "OnSubmitCompleted", EventCallback.Factory.Create<PaymentMethodModel>(this, HandleBrandSavedAsync) }
        },
        new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            Snackbar.Add("Feature updated successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private class PaymentVm
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";

        public string Active
        {
            get => IsActive ? "Yes" : "No";
        }

        public bool IsActive { get; set; }
    }
}
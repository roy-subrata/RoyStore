@page "/products"
@inherits LayoutComponentBase

@using Client.Shared.Pages.Shared
@using Client.Shared.Services
@inject ISnackbar Snackbar
@inject ProductService ProductService


@inject IDialogService DialogService
@inject NavigationManager Navigation


<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <!-- Search -->
    <MudTextField @bind-Value="_searchText" Margin="Margin.Dense" Placeholder="Search products..."
        Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
        Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

    <!-- Actions -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Print"
            OnClick="Print">
            Print
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="AddNew">
            Add New
        </MudButton>
    </MudStack>
</MudStack>

<MudTable @ref="_table" T="GetProductDto" class="mt-3" ServerData="LoadServerData" Dense="true" Hover="true"
  Elevation="0"  Bordered=true  Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="GetProductDto">Part No</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="GetProductDto" SortBy="x => x.Name">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="GetProductDto">Local Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="GetProductDto">Category</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="GetProductDto">Brand</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="GetProductDto">Unit</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="PartNo">@context.PartNo</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Name">@context.LocalName</MudTd>
        <MudTd DataLabel="Category">@context.Category.Name</MudTd>
        <MudTd DataLabel="Brand">@context.Brand.Name</MudTd>
        <MudTd DataLabel="Brand">@context.Unit.Name</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary"
                OnClick="@(() => EditProduct(@context.Id))" />
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                OnClick="@(async () => await ConfirmAsync(context))" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {
    private MudTable<GetProductDto>? _table;
    private string _searchText = "";
    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }
    public async Task<TableData<GetProductDto>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1; // MudTable is 0-based
        var pageSize = state.PageSize;

        var result = await ProductService.GetAsync(_searchText, page, pageSize);

        return new TableData<GetProductDto>
        {
            Items = result.Data,
            TotalItems = result.Total
        };
    }

    public void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    public void AddNew()
    {
        Navigation.NavigateTo("/product-form");
    }

    private void EditProduct(string productId)
    {
        Navigation.NavigateTo($"/product-form/{productId}");

    }

    private async Task ConfirmAsync(GetProductDto product)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this product?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            await ProductService.DeleteAsync(product.Id);
            Snackbar.Add("Product deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }
}
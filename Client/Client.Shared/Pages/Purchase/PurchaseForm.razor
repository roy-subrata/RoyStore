@page "/purchase/form/{Id?}"
@using Client.Shared.Services
@inject IStringLocalizer<Shared> L
@inject SupplierService SupplierService
@inject PurchaseService PurchaseService
@inject ProductService ProductService
@inject PaymentMethodService PaymentMethodService;

@inject UnitService UnitService
@inject NavigationManager Navigation

<MudGrid >
    <MudItem md="8">
    <MudGrid>
        <MudItem xs="12" sm="6" md="6">
                <MudPaper Class="pa-3" Elevation="1">
                    <MudText Typo="Typo.subtitle2">Purchase No:@Purchase?.PurchaseNo</MudText>
                    <MudText Typo="Typo.subtitle2">Purchase Date: @Purchase?.PurchaseDate</MudText>
                    <MudText Typo="Typo.subtitle2">Purchase Status: @Purchase?.Status</MudText>
                </MudPaper>
            </MudItem>
         <MudItem xs="12" sm="6" md="6">
    <MudPaper  Elevation="1">
        <MudAutocomplete T="SupplierDto"
                         Variant="Variant.Outlined"
                         Margin="Margin.Dense"
                         @bind-Value="SelectedSupplier"
                         SearchFunc="SearchSuppliers"
                         ToStringFunc="x=>x?.Name"
                         Label="Select Supplier">
        </MudAutocomplete>
    </MudPaper>
</MudItem>


    </MudGrid>
       <MudForm @ref="form" Model="Purchase">
    <MudGrid>
             <MudItem xs="12" sm="12" md="12">
               <MudPaper  Elevation="1" Class="w-50">
            <MudAutocomplete  T="Item" Label="@L["Search"]" @bind-Value="SelectedItem" SearchFunc="SearchItems"
                ToStringFunc="x => x?.Name" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" >
                <ItemTemplate>
                    <div style="display: flex; flex-direction: column;">
                        <span style="font-weight: 600; font-size: 1rem;">@context.Name</span>
                        <span style="font-size: 0.85rem; color: gray;">
                            @context.LocalName | Qty: @context.Quantity
                        </span>
                    </div>
                </ItemTemplate>

            </MudAutocomplete>
            </MudPaper>

            <MudTable Items="@Purchase.Items" CustomFooter=true Hover="true" Dense="true" Bordered="false"
                Elevation="0">

                <RowTemplate>
                    <MudTd Style="width:55%">
                        <div style="display: flex; flex-direction: column;">
                            <span style="font-weight: 600; font-size: 1rem;">@(@Purchase.Items.IndexOf(context) + 1).
                                @context.Name | @context.PartNo</span>

                            <span style="font-size: 0.85rem; color: gray;">
                                @context.LocalName | Qty: @context.Quantity | Br: @context.BrandName
                            </span>
                        </div>
                    </MudTd>

                    <MudTd Style="width:15%">
                        <MudNumericField @bind-Value="context.Quantity" Margin="Margin.Dense" Variant="Variant.Outlined"
                            Dense="true" Min="1" />
                    </MudTd>
                    <MudTd Style="width:15%">
                        <MudAutocomplete T="UnitDto" @bind-Value="context.Unit" ToStringFunc="x => x?.ShortCode"  Margin="Margin.Dense" Variant="Variant.Outlined"  SearchFunc="SearchUnits"/>
                    </MudTd>
                    <MudTd Style="width:15%">
                        <MudNumericField @bind-Value="context.Price" HideSpinButtons=true Margin="Margin.Dense" Variant="Variant.Outlined"
                            Dense="true" Min="0" />
                    </MudTd>

                    <MudTd Style="width:15%">

                        <div style="display: flex; align-items: center; justify-content: space-between; gap: 0.5rem;">
                            <span>@(context.Quantity* context.Price)</span>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Small"
                                OnClick="() => RemoveItem(context)" />
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
        
    </MudGrid>
</MudForm>
 
    </MudItem>

   <MudItem xs="12" sm="6" md="4">
         <MudPaper Class="pa-3" Elevation="1">
          <MudNumericField Margin="Margin.Dense" HideSpinButtons=true Variant="Variant.Outlined"
                Label="Advanced" Disabled=true @bind-Value="Purchase.AdvacedAmount" />

            <MudNumericField Margin="Margin.Dense" HideSpinButtons=true Variant="Variant.Outlined"
                Label="Subtoal" Disabled=true @bind-Value="Purchase.AdvacedAmount" />
                <MudGrid>
                <MudItem xs="12" sm="6" md="6">
                    <MudNumericField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Tax(%)"
                        @bind-Value="Purchase.Tax" Min="1" HideSpinButtons=true />
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudNumericField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Vat(%)"
                        @bind-Value="Purchase.Vat" Min="1" HideSpinButtons=true />
                </MudItem>
            </MudGrid>
 <MudNumericField Margin="Margin.Dense" Variant="Variant.Outlined" Label="Discount"
                @bind-Value="Purchase.DiscountAmount" Min="1" HideSpinButtons=true />
            <MudNumericField Margin="Margin.Dense" Disabled Variant="Variant.Outlined" Label="Total"
                @bind-Value="Purchase.DeliveryCharge" Min="1" HideSpinButtons=true />
            <MudTextField T="string" Label="Ref Note" Lines="2" Variant="Variant.Outlined" Margin="Margin.Dense"
                    @bind-Value="Purchase.RefNote" />
        </MudPaper>
        <MudItem Class="mt-5">
         <MudStack Row Justify=Justify.FlexEnd Spacing="2" >
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="Submit">
        Save
    </MudButton>
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="Cancel">
        Cancel
    </MudButton>
</MudStack>
        </MudItem>
    </MudItem>
</MudGrid>



@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private Item _selectedItem;
    private SupplierDto SelectedSupplier;
    private bool Success;
    private bool IsEditMode => !string.IsNullOrEmpty(Purchase.Id);

    private MudForm? form;

    PurchaseFormModel Purchase = new PurchaseFormModel();

    private Item SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (_selectedItem != value)
            {
                _selectedItem = value;
                if (_selectedItem != null)
                    AddItem(_selectedItem); // add item on selection
            }
        }
    }
    private GetPurchaseDto? purchase { get; set; } = null!;
    private bool selectedOnTab;

    private double total => Purchase.Items.Sum(x => x.Quantity * x.Price);

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
           purchase = await PurchaseService.GetByIdAsync(Id);

            if (purchase is not null)
            {
                Purchase = new PurchaseFormModel()
                {
                    Id = purchase.Id,
                    PurchaseNo = purchase.PurchaseNo,
                    PurchaseDate = purchase.PurchaseDate,
                    Status = PurchaseStatus.Draft,
                    TotalAmount = purchase.SubTotal,
                    DueAmount = purchase.Due,
                    PaidAmount = purchase.Paid,
                    Tax = purchase.Tax,
                    Vat = purchase.Vat,
                    DiscountAmount = purchase.DiscountAmount,
                    Items = purchase.Items.Select(x =>
                    {
                        return new Item()
                        {
                            Id = x.Id,
                            Name = x.LocalName,
                            LocalName = x.LocalName,
                            BrandName = x.LocalName,
                            PartNo = x.partNo,
                            Quantity = x.OrderedQuantity,
                            Price = x.UnitPrice
                        };
                    }).ToList()
                };

                SelectedSupplier = await SupplierService.GetByIdAsync(purchase.Supplier.Id);
            }
        }
    }

    private async Task Submit()
    {
        if (form is null) return;
        if (!form.IsValid) return;

        try
        {
            if (IsEditMode)
            {
                await PurchaseService.UpdateAsync(Purchase.Id, new CreatePurchaseDto(
                Purchase.PurchaseNo,
                Purchase.PurchaseDate ?? DateTime.Now,
                SelectedSupplier.Id,
                PurchaseStatus.Draft,
                Purchase.Vat,
                Purchase.Tax,
                Purchase.DiscountAmount,
                Purchase.RefNote,
                Purchase.Items.Select(x => new CreatePurchaseItemDto(x.Id, x.Unit.Id,x.Quantity, x.Price))
                .ToList()));
            }

            else
            {
                await PurchaseService.CreateAsync(new CreatePurchaseDto(
                Purchase.PurchaseNo,
                Purchase.PurchaseDate ?? DateTime.Now,
                SelectedSupplier.Id,
                PurchaseStatus.Draft,
                Purchase.Vat,
                Purchase.Tax,
                Purchase.DiscountAmount,
                Purchase.RefNote,
                Purchase.Items.Select(x => new CreatePurchaseItemDto(x.Id, x.Unit.Id, x.Quantity, x.Price))
                .ToList()));

            }

            Navigation.NavigateTo("/purchase");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddItem(Item item)
    {
        var exist = Purchase.Items.Find(x => x.Id == item.Id);
        if (exist is null)
        {
            Purchase.Items.Add(new Item
            {
                Id = item.Id,
                Name = item.Name,
                LocalName = item.LocalName,
                PartNo = item.PartNo,
                BrandName = item.BrandName,
                Quantity = 1,
                Price = 0
            });
        }
        else
        {
            exist.Quantity++;
        }

        _selectedItem = null;
    }

    private void RemoveItem(Item item)
    {
        Purchase.Items.Remove(item);
    }

    private async Task<IEnumerable<SupplierDto>> SearchSuppliers(string value, CancellationToken cancellationToken)
    {
        var result = await SupplierService.GetAsync(search: value ?? string.Empty);

        return result.Data.Select(x => new SupplierDto(x.Id, x.Name, x.Phone, x.Email, x.Address));
    }
    private async Task<IEnumerable<UnitDto>> SearchUnits(string value, CancellationToken cancellationToken)
    {
        var result = await UnitService.GetAsync(search: value ?? string.Empty);

        return result.Data;
    }

    private async Task<IEnumerable<Item>> SearchItems(string value, CancellationToken cancellationToken)
    {
        var result = await ProductService.GetAsync(search: value ?? string.Empty);

        return result.Data.Select(x => new Item()
        {
            Id = x.Id,
            Name = x.LocalName,
            PartNo = x.PartNo,
            Price = 0,
            BrandName = x.Brand.Name,
            LocalName = x.LocalName
        });
    }
    
    private async Task<IEnumerable<PaymentMethodDto>> SearchPaymentMethod(string value, CancellationToken cancellationToken)
    {
        Pages<PaymentMethodDto>? result = await PaymentMethodService.GetAsync(search: value ?? string.Empty);
        return result.Data;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/purchase");
    }

    public class PurchaseFormModel
    {
        public string Id { get; set; } = string.Empty;
        private string _purchaseNo = $"P-{DateTime.Now:yyMMdd}-{Guid.NewGuid().ToString()[..3].ToUpper()}";

        public string PurchaseNo
        {
            get => _purchaseNo;
            set => _purchaseNo = value;
        }

        private DateTime? _purchaseDate = DateTime.Now;

        public DateTime? PurchaseDate
        {
            get => _purchaseDate;
            set => _purchaseDate = value;
        }

        public PurchaseStatus Status { get; set; }
        public double PaidAmount { get; set; }

        public double PaymentDue => (Subtotal + DeliveryCharge + Tax + Vat) - DiscountAmount;

        public double Subtotal => Items.Sum(x => x.Quantity * x.Price);
        public double TotalAmount { get; set; }
        private double _dueAmount { get; set; }

        public double DueAmount
        {
            get => _dueAmount;
            set => _dueAmount = TotalAmount - PaidAmount;
        }

        public string RefNote { get; set; } = string.Empty;
        public double Tax { get; set; }
        public double Vat { get; set; }
        public double DiscountAmount { get; set; }
        public double DeliveryCharge { get; set; }
        public double AdvacedAmount { get; set; }
        public List<Item> Items { get; set; } = new List<Item>();
    }


    public class Item
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; }= string.Empty;
        public string LocalName { get; set; }= string.Empty;
        public string PartNo { get; set; }= string.Empty;
        public string BrandName { get; set; }= string.Empty;

        public UnitDto Unit{ get;set;}=null!;
        public double Quantity { get; set; }
        public double Price { get; set; }
    }

   

}
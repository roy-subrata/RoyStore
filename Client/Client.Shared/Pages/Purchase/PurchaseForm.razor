@page "/purchase-form/{Id?}"
@using Client.Shared.Pages.Shared
@using Client.Shared.Services
@inject IStringLocalizer<Shared> L
@inject SupplierService SupplierService
@inject PurchaseService PurchaseService
@inject ProductService ProductService
@inject NavigationManager Navigation

<MudForm @ref="form" Model="Purchase">
    <MudGrid Class="=p-2 ">
        <MudItem xs="12" sm="6" md="5">
            <MudItem xs="12" sm="6">Po No : @Purchase.PurchaseNo</MudItem>
            <MudItem xs="12" sm="6">

                @* <MudDatePicker Label="MM/dd/yyyy" Margin="Margin.Dense" Editable="true"
                    @bind-Date="Purchase.PurchaseDate" DateFormat="MM/dd/yyyy" Placeholder="en-US Date"
                    Variant="Variant.Outlined" /> *@

            </MudItem>
            <MudItem xs="12" sm="6">Status:@Purchase.Status</MudItem>

            <MudAutocomplete T="Item" Label="@L["Search"]" @bind-Value="SelectedItem" SearchFunc="SearchItems"
                             ToStringFunc="x => x?.Name" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined"
                             Style="width:100%;"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="7">
            <div class="flex flex-col">
                <MudAutocomplete T="SupplierDto" Margin="Margin.Dense" Label="Vendor" @bind-Value="SelectedSupplier"
                                 SearchFunc="SearchSuppliers" ToStringFunc="x => x?.Name" Dense="true"
                                 Variant="Variant.Outlined"
                                 Style="width:100%;"/>
                <div class="flex flex-col">
                    <label>Email:@SelectedSupplier?.Email</label>
                    <label>Phone:@SelectedSupplier?.Phone</label>
                    <label>Address:@SelectedSupplier?.Address</label>
                </div>
            </div>
            <div>
                <MudTable Items="@Purchase.Items" CustomFooter=true Hover="true" Dense="true" Bordered="false"
                          Elevation="0"
                          Class="mt-2">
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Item</MudTh>
                        <MudTh>Qty</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Total</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd>@(@Purchase.Items.IndexOf(context) + 1)</MudTd>

                        <MudTd>
                            <div>
                                <div style="font-weight:bold;">@context.Name</div>
                                <div style="font-size:0.85rem; color:gray;">
                                    Part No: @context.PartNo | Local Name: @context.LocalName |
                                    Brand: @context.BrandName
                                </div>
                            </div>
                        </MudTd>

                        <MudTd>
                            <MudNumericField @bind-Value="context.Quantity" Margin="Margin.Dense"
                                             Variant="Variant.Outlined"
                                             Dense="true" Min="1"/>
                        </MudTd>

                        <MudTd>
                            <MudNumericField @bind-Value="context.Price" Margin="Margin.Dense"
                                             Variant="Variant.Outlined"
                                             Dense="true" Min="0"/>
                        </MudTd>

                        <MudTd>@(context.Quantity * context.Price)</MudTd>

                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                           OnClick="() => RemoveItem(context)"/>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>


        </MudItem>
    </MudGrid>

    <MudTable Items="@Purchase.Items" CustomFooter=true Hover="true" Dense="true" Bordered="false" Elevation="0"
              Class="mt-2">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Item</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Total</MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd>@(@Purchase.Items.IndexOf(context) + 1)</MudTd>

            <MudTd>
                <div>
                    <div style="font-weight:bold;">@context.Name</div>
                    <div style="font-size:0.85rem; color:gray;">
                        Part No: @context.PartNo | Local Name: @context.LocalName | Brand: @context.BrandName
                    </div>
                </div>
            </MudTd>

            <MudTd>
                <MudNumericField @bind-Value="context.Quantity" Margin="Margin.Dense" Variant="Variant.Outlined"
                                 Dense="true" Min="1"/>
            </MudTd>

            <MudTd>
                <MudNumericField @bind-Value="context.Price" Margin="Margin.Dense" Variant="Variant.Outlined"
                                 Dense="true" Min="0"/>
            </MudTd>

            <MudTd>@(context.Quantity * context.Price)</MudTd>

            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                               OnClick="() => RemoveItem(context)"/>
            </MudTd>
        </RowTemplate>

        <FooterContent>
            <MudTFootRow>
                <MudTd ColSpan="3"></MudTd>
                <MudTd>Subtotal</MudTd>
                <MudTd>@Purchase.Subtotal</MudTd>
                <MudTd></MudTd>
            </MudTFootRow>

            <MudTFootRow>
                <MudTd ColSpan="3"></MudTd>
                <MudTd>Discount</MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="Purchase.DiscountAmount" Margin="Margin.Dense"
                                     Variant="Variant.Outlined" Dense="true" Min="1"/>
                </MudTd>
                <MudTd></MudTd>
            </MudTFootRow>
            <MudTFootRow>
                <MudTd ColSpan="3"></MudTd>
                <MudTd>Total</MudTd>
                <MudTd>@Purchase.TotalAmount</MudTd>
                <MudTd></MudTd>
            </MudTFootRow>
            <MudTFootRow>
                <MudTd ColSpan="3"></MudTd>
                <MudTd>Payment</MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="Purchase.PaidAmount" Margin="Margin.Dense" Variant="Variant.Outlined"
                                     Dense="true" Min="1"/>
                </MudTd>
                <MudTd></MudTd>
            </MudTFootRow>
            <MudTFootRow>
                <MudTd ColSpan="3"></MudTd>
                <MudTd>Due</MudTd>
                <MudTd>@Purchase.DueAmount</MudTd>
                <MudTd></MudTd>
            </MudTFootRow>
        </FooterContent>
    </MudTable>

    <div class="flex flex-row justify-end space-x-2">
        <MudButton Color="Color.Primary" OnClick="Submit">Save As Draft</MudButton>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
    </div>


</MudForm>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private Item _selectedItem;
    private SupplierDto SelectedSupplier;
    private bool Success;
    private bool IsEditMode => !string.IsNullOrEmpty(Purchase.Id);

    private MudForm? form;

    PurchaseFormModel Purchase = new PurchaseFormModel();

    private Item SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (_selectedItem != value)
            {
                _selectedItem = value;
                if (_selectedItem != null)
                    AddItem(_selectedItem); // add item on selection
            }
        }
    }

    private bool selectedOnTab;

    private double total => Purchase.Items.Sum(x => x.Quantity * x.Price);

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var purchase = await PurchaseService.GetByIdAsync(Id);

            if (purchase is not null)
            {
                Purchase = new PurchaseFormModel()
                {
                    Id = purchase.Id,
                    PurchaseNo = purchase.PurchaseNo,
                    PurchaseDate = purchase.PurchaseDate,
                    Status = purchase.Status,
                    TotalAmount = purchase.TotalAmount,
                    DeliveryCharge = purchase.DeliveryCharge,
                    DueAmount = purchase.DueAmount,
                    PaidAmount = purchase.PaidAmount,
                    TaxAmount = purchase.TaxAmount,
                    VatAmount = purchase.VatAmount,
                    DiscountAmount = purchase.DiscountAmount,
                    Items = purchase.Items.Select(x =>
                    {
                        return new Item()
                        {
                            Id = x.Id,
                            Name = x.LocalName,
                            LocalName = x.LocalName,
                            BrandName = x.LocalName,
                            PartNo = x.partNo,
                            Quantity = x.RemainingQuantity,
                            Price = x.UnitPrice
                        };
                    }).ToList()
                };

                SelectedSupplier = await SupplierService.GetByIdAsync(purchase.Supplier.Id);
            }
        }
    }

    private async Task Submit()
    {
        if (form is null) return;
        if (!form.IsValid) return;

        try
        {
            if (IsEditMode)
            {
                await PurchaseService.UpdateAsync(Purchase.Id, new CreatePurchaseDto(
                    Purchase.PurchaseNo,
                    SelectedSupplier.Id,
                    Purchase.PurchaseDate,
                    Purchase.DeliveryCharge,
                    Purchase.VatAmount,
                    Purchase.TaxAmount,
                    Purchase.DiscountAmount,
                    Purchase.PaidAmount,
                    Status.Draft,
                    Purchase.Items.Select(x => new CreatePurchaseItemDto(x.Id, x.Quantity, x.Price))
                        .ToList()));
            }

            else
            {
                await PurchaseService.CreateAsync(new CreatePurchaseDto(
                    Purchase.PurchaseNo,
                    SelectedSupplier.Id,
                    Purchase.PurchaseDate,
                    Purchase.DeliveryCharge,
                    Purchase.VatAmount,
                    Purchase.TaxAmount,
                    Purchase.DiscountAmount,
                    Purchase.PaidAmount,
                    Status.Draft,
                    Purchase.Items.Select(x => new CreatePurchaseItemDto(x.Id, x.Quantity, x.Price))
                        .ToList())
                );
            }

            Navigation.NavigateTo("/purchases");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddItem(Item item)
    {
        var exist = Purchase.Items.Find(x => x.Id == item.Id);
        if (exist is null)
        {
            Purchase.Items.Add(new Item
            {
                Id = item.Id,
                Name = item.Name,
                LocalName = item.LocalName,
                PartNo = item.PartNo,
                BrandName = item.BrandName,
                Quantity = 1,
                Price = 0
            });
        }
        else
        {
            exist.Quantity++;
        }

        _selectedItem = null;
    }


    private void RemoveItem(Item item)
    {
        Purchase.Items.Remove(item);
    }

    private async Task<IEnumerable<SupplierDto>> SearchSuppliers(string value, CancellationToken cancellationToken)
    {
        var result = await SupplierService.GetAsync(search: value ?? string.Empty);

        return result.Data.Select(x => new SupplierDto(x.Id, x.Name, x.Phone, x.Email, x.Address));
    }

    private async Task<IEnumerable<Item>> SearchItems(string value, CancellationToken cancellationToken)
    {
        var result = await ProductService.GetAsync(search: value ?? string.Empty);

        return result.Data.Select(x => new Item()
        {
            Id = x.Id,
            Name = x.LocalName,
            PartNo = x.PartNo,
            Price = 0,
            BrandName = x.Brand.Name,
            LocalName = x.LocalName
        });
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/purchases");
    }


    public class PurchaseFormModel
    {
        public string Id { get; set; } = string.Empty;
        private string _purchaseNo = $"P-{DateTime.Now:yyMMdd}-{Guid.NewGuid().ToString()[..3].ToUpper()}";

        public string PurchaseNo
        {
            get => _purchaseNo;
            set => _purchaseNo = value;
        }

        private DateTime _purchaseDate = DateTime.Now;

        public DateTime PurchaseDate
        {
            get => _purchaseDate;
            set => _purchaseDate = value;
        }

        public string Status { get; set; }
        public double PaidAmount { get; set; }

        public double PaymentDue => (Subtotal + DeliveryCharge + TaxAmount + VatAmount) - DiscountAmount;

        public double Subtotal => Items.Sum(x => x.Quantity * x.Price);
        public double TotalAmount { get; set; }
        private double _dueAmount { get; set; }

        public double DueAmount
        {
            get => _dueAmount;
            set => _dueAmount = TotalAmount - PaidAmount;
        }

        public double TaxAmount { get; set; }
        public double VatAmount { get; set; }
        public double DiscountAmount { get; set; }
        public double DeliveryCharge { get; set; }
        public List<Item> Items { get; set; } = new List<Item>();
    }

    public class Item
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string LocalName { get; set; }
        public string PartNo { get; set; }
        public string BrandName { get; set; }
        public int Quantity { get; set; }
        public double Price { get; set; }
    }

}
@page "/purchase/payment/{Id?}"
@inherits LayoutComponentBase
@using Client.Shared.Pages.Shared
@using Client.Shared.Services
@using MudBlazor.Extensions

@inject PaymentMethodService PaymentMethodService;
@inject PurchaseService PurchaseService;
@inject IDialogService DialogService
@inject PurchasePaymentService PurchasePaymentService
@inject NavigationManager Navigation;
@inject ISnackbar Snackbar;

<MudGrid>
    <MudItem md="8">
            <MudGrid>
            <MudItem xs="12" sm="6" md="6">
            <MudPaper Class="pa-3" Elevation="1">
        <MudText Typo="Typo.subtitle2">Purchase No: @Purchase?.PurchaseNo</MudText>
        <MudText Typo="Typo.subtitle2">Purchase Date: @Purchase?.PurchaseDate</MudText>
        <MudText Typo="Typo.subtitle2">Purchase Status:@Purchase?.Status</MudText>
           </MudPaper>
    </MudItem>
             <MudItem xs="12" sm="6" md="6">
              <MudPaper Class="pa-3" Elevation="1">
        <MudText Typo="Typo.subtitle2">Supplier Name:@Purchase?.Supplier?.Name</MudText>
        <MudText Typo="Typo.subtitle2">Total Amount:@(Purchase?.SubTotal)</MudText>
        <MudText Typo="Typo.subtitle2">Due Amount:@Purchase?.Due</MudText>
                </MudPaper>
    </MudItem>    
        </MudGrid>
        <MudStack class="mt-1" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <!-- Search -->
    <MudTextField @bind-Value="_searchText" Placeholder="Search..." Variant="Variant.Outlined" Margin="Margin.Dense"
        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
        DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

    <!-- Actions -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">

    </MudStack>
</MudStack>
      <div style="max-height:400px; overflow-y:auto;">
<MudTable @ref="_table" Class="mt-3" T="PurchasePaymentVm" ServerData="LoadServerData" Elevation="0" Bordered=true
    Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="PurchasePaymentVm" SortBy="x => x.PaymentDate">Date</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="PurchasePaymentVm" SortBy="x => x.PaymentAmount">Payment</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="PurchasePaymentVm" SortBy="x => x.NoteRef">Reference</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.PaymentDate</MudTd>
        <MudTd DataLabel="Description">@context.PaymentAmount</MudTd>
         <MudTd DataLabel="NoteRef">@context.NoteRef</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" OnClick="@(() => Edit(context))" Icon="@Icons.Material.Outlined.Edit"
                Color="Color.Primary" />
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                OnClick="@(async () => await ConfirmAsync(context))" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
</div>
</MudItem>
    <MudItem md="4">
                <MudPaper Class="pa-3" Elevation="1">
        <MudForm @ref="_form" Model="Model" @bind-IsValid="@success">
             <MudGrid>
            <MudItem md="12">
      <MudDatePicker Label="MM/dd/yyyy" Margin="Margin.Dense" Editable="true" @bind-Date="Model.PaymentDate"
                DateFormat="MM/dd/yyyy" Placeholder="en-US Date" Variant="Variant.Outlined" />
        </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem md="6">
                    <MudNumericField T="double" @bind-Value="Model.PaymentAmount" Label="Payment" Margin="Margin.Dense"
        Required="true" RequiredError="Amount is required!" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="6">
                    <MudAutocomplete T="PaymentMethodDto" Margin="Margin.Dense" Label="Type"
                        @bind-Value="_selectedMethod" SearchFunc="SearchPaymentMethod"
                        Required="true" RequiredError="Payment method is required!"
                        ToStringFunc="x => x?.ProviderName" Dense="true" Variant="Variant.Outlined" Style="width:100%;">
                        <ItemTemplate>
                            <div style="display: flex; flex-direction: column;">
                                <!-- Header / main text -->
                                <span style="font-weight: 600; font-size: 1rem;">@context.ProviderName</span>

                                <!-- Subtext / smaller, muted -->
                                <span style="font-size: 0.85rem; color: gray;">
                                    @context.AccountNo
                                </span>
                            </div>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
            </MudGrid>
       
            <MudGrid>
            <MudItem md="12">
              <MudTextField Lines="2" T="string" @bind-Value="Model.NoteRef" Label="Note" Margin="Margin.Dense"
            Variant="Variant.Outlined">
        </MudTextField>
        </MudItem>
        <MudItem Class="mt-5">
       
        </MudItem>
            </MudGrid>
        </MudForm>
            </MudPaper>

         <MudStack Row Justify=Justify.FlexEnd Spacing="2"  class="mt-5">
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="Submit">
        Payment
    </MudButton>
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="Clear">
        Cancel
    </MudButton>
    
</MudStack>
    </MudItem>
</MudGrid>




@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    private string _searchText = "";
    private PaymentMethodDto? _selectedMethod;
    private GetPurchaseDto Purchase { get; set; }=null!;
    private MudForm? _form;
    private bool success;
    private bool IsEditMode => !string.IsNullOrEmpty(Model.Id);
    private PurchasePaymentModel Model { get; set; } = new();
    private MudTable<PurchasePaymentVm>? _table;

    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(Id))
            Purchase = await PurchaseService.GetByIdAsync(Id);
    }
    private async Task<TableData<PurchasePaymentVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        int page = state.Page + 1;
        int pageSize = state.PageSize;

        Pages<GetPurchasePaymentDto>? result = await PurchasePaymentService.GetAsync(_searchText, Id, page, pageSize);


        List<PurchasePaymentVm>? items = (result?.Data ?? []).Select(c => new PurchasePaymentVm
        {
            Id = c.Id,
            PaymentAmount = c.PaymentAmount,
            PurchasePaymentId = c.PaymentMethodId,
            PaymentDate = c.PaymentDate,
            NoteRef = c.NoteRef
        }).ToList();
   

        return new TableData<PurchasePaymentVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }
    private async Task<IEnumerable<PaymentMethodDto>> SearchPaymentMethod(string value, CancellationToken cancellationToken)
    {
        Pages<PaymentMethodDto>? result = await PaymentMethodService.GetAsync(search: value ?? string.Empty);
        return result.Data;
    }
    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private async Task ConfirmAsync(PurchasePaymentVm vm)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this Payment?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        DialogResult? result = await dialog.Result;
        if (result is { Canceled: false })
        {
            await PurchasePaymentService.DeleteAsync(vm.Id);
            Snackbar.Add("Payment deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private void Clear(){
        Model=new PurchasePaymentModel();
        _selectedMethod=null;
    }
    private async Task Submit()
    {
        if (_form is null) return;
        if (!_form.IsValid) return;

        try
        {
            CreatePurchasePaymentDto? purchasePayment=new CreatePurchasePaymentDto(
                Purchase.Id,
                Purchase.Supplier.Id,
                _selectedMethod.Id,
                Model.PaymentDate.Value,
                Model.PaymentAmount,
                Model.NoteRef
                );
            if (IsEditMode)
            {
                //
                await PurchasePaymentService.UpdateAsync(Model.Id,purchasePayment);
            }

            else
            {
                await PurchasePaymentService.CreateAsync( purchasePayment);

            }
            _ = _table?.ReloadServerData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($@"Error: {ex.Message}");
        }
    }

    private async Task Edit(PurchasePaymentVm purchasePayment)
    {
        Model = new PurchasePaymentModel()
        {
            Id = purchasePayment.Id,
            PaymentDate = purchasePayment.PaymentDate,
            PaymentAmount = purchasePayment.PaymentAmount,
            PaymentMethodId = purchasePayment.PurchasePaymentId,
            NoteRef = purchasePayment.NoteRef
        };
        _selectedMethod = await PaymentMethodService.GetByIdAsync(Model.PaymentMethodId);
    }

    private class PurchasePaymentVm
    {
        public string Id { get; set; } = string.Empty;
        public DateTime? PaymentDate { get; set; }
        public string PurchasePaymentId { get; set; } = string.Empty;
        public double PaymentAmount { get; set; }
        public string NoteRef { get; set; }=string.Empty;
    }

    private class PurchasePaymentModel
    {
        public string Id { get; set; }
        public string PaymentMethodId { get; set; }=string.Empty;
        public DateTime? PaymentDate { get; set; }
        public double PaymentAmount { get; set; }
        public string NoteRef { get; set; }=string.Empty;
    }
}
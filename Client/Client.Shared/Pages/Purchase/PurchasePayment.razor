@page "/purchase-payment"
@inherits LayoutComponentBase

@using Client.Shared.Pages.Shared
@using Client.Shared.Services

@using static Client.Shared.Pages.Brand.BrandForm

@inject IDialogService DialogService
@inject BrandService BrandService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem md="4">
        <MudText Typo="Typo.subtitle2">Purchase No:</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">54654</MudText>

        <MudText Typo="Typo.subtitle2">Purchase Date:</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">12/09/2025</MudText>

        <MudText Typo="Typo.subtitle2">Supplier Name:</MudText>
        <MudText Typo="Typo.body2">ABC Traders</MudText>
    </MudItem>
    <MudItem xs="4">
        <MudText Typo="Typo.subtitle2">Due Amount:</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">৳ 10,000</MudText>

        <MudText Typo="Typo.subtitle2">Advanced Amount:</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">৳ 5,000</MudText>

        <MudText Typo="Typo.subtitle2">Last Payment:</MudText>
        <MudText Typo="Typo.body2">৳ 2,000</MudText>
    </MudItem>

    <MudItem md="4">
        <MudGrid>
            <MudItem md="6">
                <MudNumericField T="double" Label="Payment" Margin="Margin.Dense" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem md="6">
                <MudSelect Label="Type" T="string" Margin="Margin.Dense" Variant="Variant.Outlined">
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudTextField Lines="2" T="string" Label="Note" Margin="Margin.Dense" Variant="Variant.Outlined">
        </MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">
            Payment
        </MudButton>

    </MudItem>
</MudGrid>



<MudStack class="mt-1" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <!-- Search -->
    <MudTextField @bind-Value="_searchText" Placeholder="Search..." Variant="Variant.Outlined" Margin="Margin.Dense"
        Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
        DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

    <!-- Actions -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">

    </MudStack>
</MudStack>

<MudTable @ref="_table" Class="mt-3" T="BrandVm" ServerData="LoadServerData" @bind-SelectedItem="_selectedBrand"
    Elevation="0" Bordered=true Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="BrandVm" SortBy="x => x.Name">Date</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="BrandVm" SortBy="x => x.Description">Payment</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" OnClick="@(async () => await EditDailogAsync(context))"
                Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                OnClick="@(async () => await ConfirmAsync(context))" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private string _searchText = "";
    private BrandVm? _selectedBrand;

    // Main server-side data loader
    private async Task<TableData<BrandVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1; // MudTable is 0-based
        var pageSize = state.PageSize;

        var result = await BrandService.GetAsync(_searchText, page, pageSize);

        var items = result.Data.Select(c => new BrandVm
        {
            Id = c.Id,
            Name = c.Name,
            Description = c.Description
        }).ToList();

        return new TableData<BrandVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }

    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private MudTable<BrandVm>? _table;

    private void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    private async Task ConfirmAsync(BrandVm Brand)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this Brand?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await BrandService.DeleteAsync(Brand.Id);
            Snackbar.Add("Brand deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task HandleBrandSavedAsync(BrandModel result)
    {
        if (result is not null)
        {
            Snackbar.Add("Brand saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters
{
{ "Model", new BrandModel() },
{ "OnSubmitCompleted", EventCallback.Factory.Create<BrandModel>(this, HandleBrandSavedAsync) }
};

        @* var dialog = await DialogService.ShowAsync<BrandForm>("Add Brand", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Brand saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        } *@
    }

    private async Task EditDailogAsync(BrandVm Brand)
    {
        @* var brandModel = new BrandModel
        {
            Id = Brand.Id,
            Name = Brand.Name,
            Description = Brand.Description
        };

        var dialog = await DialogService.ShowAsync<BrandForm>("Edit Brand",
        new DialogParameters
        {
{ "Model", brandModel },
{ "OnSubmitCompleted", EventCallback.Factory.Create<BrandModel>(this, HandleBrandSavedAsync) }
        },
        new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Brand updated successfully!", Severity.Success);
            await _table!.ReloadServerData();
        } *@
    }

    private class BrandVm
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string CreatedAt { get; set; } = "";
    }
}
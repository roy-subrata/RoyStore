@page "/suppliers"
@inherits LayoutComponentBase

@using Client.Shared.Pages.Shared
@using static Client.Shared.Pages.Supplier.SupplierForm


@inject IDialogService DialogService
@inject SupplierService SupplierService
@inject ISnackbar Snackbar

<MudCard Class="p-4 shadow-lg">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <!-- Search -->
        <MudTextField @bind-Value="_searchText" Placeholder="Search suppliers..." Variant="Variant.Text"
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
            DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

        <!-- Actions -->
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Print"
                OnClick="Print">
                Print
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                OnClick="OpenAddDialog">
                Add New
            </MudButton>
        </MudStack>
    </MudStack>
</MudCard>

<MudCard Class="p-4 mt-4 shadow-lg">
    <MudTable @ref="_table" T="SupplierVm" ServerData="LoadServerData" @bind-SelectedItem="_selectedsupplier"
        Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel T="SupplierVm" SortBy="x => x.Name">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="SupplierVm">Phone</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="SupplierVm">Email</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="SupplierVm">Address</MudTableSortLabel>
            </MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd>
                <MudIconButton Size="Size.Small" OnClick="@(async () => await EditDailogAsync(context))"
                    Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                    OnClick="@(async () => await ConfirmAsync(context))" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudCard>

@code {
    private string _searchText = "";
    private SupplierVm? _selectedsupplier;

    // Main server-side data loader
    private async Task<TableData<SupplierVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1; // MudTable is 0-based
        var pageSize = state.PageSize;

        var result = await SupplierService.GetAsync(_searchText, page, pageSize);

        var items = result.Data.Select(c => new SupplierVm
        {
            Id = c.Id,
            Name = c.Name,
            Phone = c.Phone,
            Email = c.Email,
            Address = c.Address
        }).ToList();

        return new TableData<SupplierVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }

    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private MudTable<SupplierVm>? _table;

    private void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    private async Task ConfirmAsync(SupplierVm supplier)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this supplier?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            await SupplierService.DeleteAsync(supplier.Id);
            Snackbar.Add("supplier deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task HandleSupplierSavedAsync(SupplierModel? result)
    {
        if (result is not null)
        {
            Snackbar.Add("supplier saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters
{
{ "Supplier", new SupplierModel() },
{ "OnSubmitCompleted", EventCallback.Factory.Create<SupplierModel>(this, HandleSupplierSavedAsync) }
};

        var dialog = await DialogService.ShowAsync<SupplierForm>("Add supplier", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            Snackbar.Add("supplier saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task EditDailogAsync(SupplierVm supplier)
    {
        var supplierModel = new SupplierModel
        {
            Id = supplier.Id,
            Name = supplier.Name,
            Email = supplier.Email,
            Phone = supplier.Phone,
            Address = supplier.Address
        };

        var dialog = await DialogService.ShowAsync<SupplierForm>("Edit supplier",
        new DialogParameters
        {
{ "Supplier", supplierModel },
{ "OnSubmitCompleted", EventCallback.Factory.Create<SupplierModel>(this, HandleSupplierSavedAsync) }
        },
        new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            Snackbar.Add("supplier updated successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private class SupplierVm
    {
        public string Id { get; set; } 
        public string Name { get; set; } 
        public string Email { get; set; } 
        public string Phone { get; set; }
        public string Address { get; set; }
    }
}

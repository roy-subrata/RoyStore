@page "/units"
@inherits LayoutComponentBase

@using Client.Shared.Pages.Shared
@using Client.Shared.Services

@using static Client.Shared.Pages.Unit.UnitForm

@inject IDialogService DialogService
@inject UnitService UnitService
@inject ISnackbar Snackbar


    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <!-- Search -->
        <MudTextField @bind-Value="_searchText" Placeholder="Search units..." Variant="Variant.Outlined"
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
          Margin="Margin.Dense"  DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

        <!-- Actions -->
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Print"
                OnClick="Print">
                Print
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                OnClick="OpenAddDialog">
                Add New
            </MudButton>
        </MudStack>
    </MudStack>



    <MudTable @ref="_table" T="UnitVm" ServerData="LoadServerData" @bind-SelectedItem="_selectedBrand" Dense="true"
     Elevation="0" Bordered=true  class="mt-3"  Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel T="UnitVm" SortBy="x => x.Name">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="UnitVm" SortBy="x => x.ShortCode">ShortCode</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="UnitVm" SortBy="x => x.BaseUnit">Base Unit</MudTableSortLabel>
            </MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="ShortCode">@context.ShortCode</MudTd>
            <MudTd DataLabel="Base Unit">@context.BaseUnit</MudTd>
            <MudTd>
                <MudIconButton Size="Size.Small" OnClick="@(async () => await EditDailogAsync(context))"
                    Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                    OnClick="@(async () => await ConfirmAsync(context))" />
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


@code {
    private string _searchText = "";
    private UnitVm? _selectedBrand;

    // Main server-side data loader
    private async Task<TableData<UnitVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var page = state.Page + 1; // MudTable is 0-based
        var pageSize = state.PageSize;

        var result = await UnitService.GetAsync(_searchText, page, pageSize);

        var items = result.Data.Select(c => new UnitVm
        {
            Id = c.Id,
            Name = c.Name,
            ShortCode = c.ShortCode,
            IsBaseUnit = c.IsBaseUnit
        }).ToList();

        return new TableData<UnitVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }

    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private MudTable<UnitVm>? _table;

    private void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    private async Task ConfirmAsync(UnitVm Brand)
    {
        var parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this Unit?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await UnitService.DeleteAsync(Brand.Id);
            Snackbar.Add("Brand deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task HandleunitsavedAsync(UnitModel result)
    {
        if (result is not null)
        {
            Snackbar.Add("Unit saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters
{
{ "Model", new UnitModel() },
{ "OnSubmitCompleted", EventCallback.Factory.Create<UnitModel>(this, HandleunitsavedAsync) }
};

        var dialog = await DialogService.ShowAsync<UnitForm>("Add Unit", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Unit saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task EditDailogAsync(UnitVm unit)
    {
        UnitModel unitModel = new UnitModel
        {
            Id = unit.Id,
            Name = unit.Name,
            ShortCode = unit.ShortCode,
            IsBaseUnit = unit.IsBaseUnit
        };

        var dialog = await DialogService.ShowAsync<UnitForm>("Edit Unit",
        new DialogParameters
        {
{ "Model", unitModel },
{ "OnSubmitCompleted", EventCallback.Factory.Create<UnitModel>(this, HandleunitsavedAsync) }
        },
        new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Unit updated successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private class UnitVm
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = "";
        public string ShortCode { get; set; } = "";
        public bool IsBaseUnit { get; set; }
        public string BaseUnit
        {
            get => IsBaseUnit ? "Yes" : "No";
        }



    }

}
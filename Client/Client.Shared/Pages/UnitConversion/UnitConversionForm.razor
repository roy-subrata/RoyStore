@using Client.Shared.Services
@inject UnitConversionService UnitConversionService
@inject UnitService UnitService
@inject NavigationManager Navigation
@inject IStringLocalizer<Shared> L

<MudPaper Class="pa-4">
    <MudForm @ref="form" Model="Model" @bind-IsValid="@success">
        <MudAutocomplete T="EntityRef" Margin="Margin.Dense" Label="From Unit" @bind-Value="Model.FromUnit"
            RequiredError="To Unit is required" SearchFunc="SearchUnit" ToStringFunc="x => x?.Name" Dense="true"
            Variant="Variant.Outlined" Style="width:100%;" />

        <MudAutocomplete T="EntityRef" Margin="Margin.Dense" Label="To Unit" @bind-Value="Model.ToUnit" Required="true"
            RequiredError="To Unit is required" SearchFunc="SearchUnit" ToStringFunc="x => x?.Name" Dense="true"
            Variant="Variant.Outlined" Style="width:100%;" />

        <MudNumericField T="double" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Factor"
            @bind-Value="Model.Factor" Required="true" RequiredError="Factor is required" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="mt-2 ml-auto"
            OnClick="Submit">
            @L["Save"]
        </MudButton>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public UnitConversionModel Model { get; set; } = new UnitConversionModel();
    [Parameter]
    public EventCallback<UnitConversionModel> OnSubmitCompleted { get; set; }

    private bool IsEditMode => String.IsNullOrEmpty(Model?.Id) == false;
    private bool success;
    private MudForm? form;
    protected override void OnParametersSet()
    {
        if (IsEditMode && Model != null)
        {
            Model = new UnitConversionModel
            {
                Id = Model.Id,
                FromUnitId = Model.FromUnitId,
                ToUnitId = Model.ToUnitId,
                Factor = Model.Factor
            };
        }
        else
        {
            Model = new UnitConversionModel();
        }
    }

    private async Task Submit()
    {
        if (form is null)
            return;
        if (form.IsValid)
        {
            if (IsEditMode)
            {
                await UnitConversionService.UpdateAsync(Model.Id, new UpdateUnitConversionDto(Model.Id, Model.FromUnit.Id,
                Model.ToUnit.Id, Model.Factor));
                await OnSubmitCompleted.InvokeAsync(Model);
            }
            else
            {
                UnitConversionDto respone = await UnitConversionService.CreateAsync(new CreateUnitConversionDto(Model.FromUnit.Id,
                Model.ToUnit.Id, Model.Factor));
                Model.Id = respone.Id;
                await OnSubmitCompleted.InvokeAsync(Model);
            }
            Navigation.NavigateTo("/unitconversion");
        }
    }
    private async Task<IEnumerable<EntityRef>> SearchUnit(string value, CancellationToken cancellationToken)
    {
        var result = await UnitService.GetAsync(search: value ?? string.Empty);
        return result.Data.Select(x => new EntityRef(x.Id, x.Name));
    }
    public class UnitConversionModel
    {
        public string Id { get; set; } = string.Empty;
        public string FromUnitId { get; set; } = string.Empty;
        public EntityRef FromUnit { get; set; }
        public string ToUnitId { get; set; } = string.Empty;
        public EntityRef ToUnit { get; set; }
        public double Factor { get; set; }
    }
}
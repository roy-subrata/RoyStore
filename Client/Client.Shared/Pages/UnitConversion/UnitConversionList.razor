@page "/UnitConversion"

@inherits LayoutComponentBase

@using Client.Shared.Pages.Shared
@using Client.Shared.Services

@using static Client.Shared.Pages.UnitConversion.UnitConversionForm

@inject IDialogService DialogService
@inject UnitConversionService UnitConversionService
@inject ISnackbar Snackbar


<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
    <!-- Search -->
    <MudTextField @bind-Value="_searchText" Placeholder="Search UnitConversions..." Variant="Variant.Outlined"
        Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"
        DebounceInterval="500" OnDebounceIntervalElapsed="OnSearchChanged" Class="w-50" />

    <!-- Actions -->
    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Start" Class="w-50" Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Print"
            OnClick="Print">
            Print
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
            OnClick="OpenAddDialog">
            Add New
        </MudButton>
    </MudStack>
</MudStack>



<MudTable @ref="_table" T="UnitConversionVm" ServerData="LoadServerData" @bind-SelectedItem="_selectedBrand"
    Elevation="0" Bordered=true class="mt-3" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="UnitConversionVm" SortBy="x => x.FromUnit.Name">From Unit
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="UnitConversionVm" SortBy="x => x.ToUnit.Name">To Unit
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="UnitConversionVm" SortBy="x => x.Factor">Factor</MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="From Unit">@context.FromUnit.Name</MudTd>
        <MudTd DataLabel="To Unit">@context.ToUnit.Name</MudTd>
        <MudTd DataLabel="Factor">@context.Factor</MudTd>
        <MudTd>
            <MudIconButton Size="Size.Small" OnClick="@(async () => await EditDailogAsync(context))"
                Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Warning"
                OnClick="@(async () => await ConfirmAsync(context))" />
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private string _searchText = "";
    private UnitConversionVm? _selectedBrand;

    // Main server-side data loader
    private async Task<TableData<UnitConversionVm>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        int page = state.Page + 1; // MudTable is 0-based
        int pageSize = state.PageSize;

        Pages<UnitConversionDto>? result = await UnitConversionService.GetAsync(_searchText, page, pageSize);

        List<UnitConversionVm>? items = result.Data.Select(c => new UnitConversionVm
        {
            Id = c.Id,
            FromUnit = new EntityRef(c.FromUnit.Id, c.FromUnit.Name),
            ToUnit = new EntityRef(c.ToUnit.Id, c.ToUnit.Name),
            Factor = c.Factor,
        }).ToList();

        return new TableData<UnitConversionVm>
        {
            Items = items,
            TotalItems = result.Total
        };
    }

    private void OnSearchChanged(string text)
    {
        _searchText = text;
        _ = _table?.ReloadServerData();
    }

    private MudTable<UnitConversionVm>? _table;

    private void Print() => Snackbar.Add("Print feature not implemented yet.", Severity.Info);

    private async Task ConfirmAsync(UnitConversionVm unitConversion)
    {
        DialogParameters? parameters = new DialogParameters
{
{ "ContentText", "Are you sure you want to delete this UnitConversion?" },
{ "ButtonText", "Yes" },
{ "Color", Color.Success }
};

        IDialogReference? dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters, new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        });

        DialogResult? result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await UnitConversionService.DeleteAsync(unitConversion.Id);
            Snackbar.Add("Unit Conversion deleted successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task HandleUnitConversionsavedAsync(UnitConversionModel result)
    {
        if (result is not null)
        {
            Snackbar.Add("UnitConversion saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task OpenAddDialog()
    {
        DialogParameters? parameters = new DialogParameters
{
{ "Model", new UnitConversionModel() },
{ "OnSubmitCompleted", EventCallback.Factory.Create<UnitConversionModel>(this, HandleUnitConversionsavedAsync) }
};

        IDialogReference? dialog = await DialogService.ShowAsync<UnitConversionForm>("Add UnitConversion", parameters, new
        DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });

        DialogResult? result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("UnitConversion saved successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private async Task EditDailogAsync(UnitConversionVm UnitConversion)
    {
        UnitConversionModel UnitConversionModel = new UnitConversionModel
        {
            Id = UnitConversion.Id,
            FromUnit = UnitConversion.FromUnit,
            ToUnit = UnitConversion.ToUnit,
            Factor = UnitConversion.Factor
        };

        var dialog = await DialogService.ShowAsync<UnitConversionForm>("Edit UnitConversion",
        new DialogParameters
        {
{ "Model", UnitConversionModel },
{ "OnSubmitCompleted", EventCallback.Factory.Create<UnitConversionModel>(this, HandleUnitConversionsavedAsync) }
        },
        new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            Snackbar.Add("UnitConversion updated successfully!", Severity.Success);
            await _table!.ReloadServerData();
        }
    }

    private class UnitConversionVm
    {
        public string Id { get; set; } = string.Empty;
        public EntityRef FromUnit { get; set; }
        public EntityRef ToUnit { get; set; }
        public double Factor { get; set; }
    }

}